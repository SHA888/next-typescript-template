{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js 14+ Project with TypeScript",
        "description": "Set up a new Next.js 14+ project with TypeScript, replacing the existing Vite and React Router setup.",
        "details": "1. Create a new Next.js project with App Router:\n```bash\nnpx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir\n```\n2. Configure essential dependencies in package.json:\n```json\n{\n  \"dependencies\": {\n    \"next\": \"^14.0.0\",\n    \"react\": \"^18.3.0\",\n    \"react-dom\": \"^18.3.0\",\n    \"@prisma/client\": \"^5.0.0\",\n    \"zod\": \"^3.22.0\",\n    \"@tanstack/react-query\": \"^5.0.0\",\n    \"next-themes\": \"^0.2.0\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.5.0\",\n    \"@types/node\": \"^20.0.0\",\n    \"@types/react\": \"^18.2.0\",\n    \"@types/react-dom\": \"^18.2.0\",\n    \"prisma\": \"^5.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"eslint-config-next\": \"^14.0.0\",\n    \"prettier\": \"^3.0.0\"\n  }\n}\n```\n3. Set up Next.js configuration in next.config.js:\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  experimental: {\n    serverActions: true,\n  },\n};\n\nmodule.exports = nextConfig;\n```\n4. Create basic folder structure according to App Router conventions:\n```\n/app\n  /page.tsx\n  /layout.tsx\n  /api\n/components\n/lib\n/public\n```",
        "testStrategy": "1. Verify the project builds without errors: `npm run build`\n2. Ensure the development server starts correctly: `npm run dev`\n3. Confirm TypeScript is properly configured by checking for type errors: `npx tsc --noEmit`\n4. Validate that the App Router structure works by navigating to the home page in the browser\n5. Test that the Next.js configuration is applied correctly by checking build output",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Code Quality Tools and Git Hooks",
        "description": "Set up ESLint, Prettier, Husky, and lint-staged for code quality enforcement and pre-commit hooks.",
        "details": "1. Install additional dev dependencies:\n```bash\nnpm install --save-dev husky lint-staged @typescript-eslint/eslint-plugin @typescript-eslint/parser prettier-plugin-tailwindcss\n```\n\n2. Configure ESLint in `.eslintrc.js`:\n```javascript\nmodule.exports = {\n  extends: ['next/core-web-vitals', 'plugin:@typescript-eslint/recommended'],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  rules: {\n    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],\n    'no-console': ['warn', { allow: ['warn', 'error'] }],\n  },\n};\n```\n\n3. Configure Prettier in `.prettierrc`:\n```json\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"es5\",\n  \"printWidth\": 100,\n  \"plugins\": [\"prettier-plugin-tailwindcss\"]\n}\n```\n\n4. Set up Husky and lint-staged:\n```bash\nnpx husky-init && npm install\nnpx husky add .husky/pre-commit \"npx lint-staged\"\n```\n\n5. Configure lint-staged in `package.json`:\n```json\n{\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n      \"eslint --fix\",\n      \"prettier --write\"\n    ],\n    \"*.{json,css,md}\": [\n      \"prettier --write\"\n    ]\n  }\n}\n```\n\n6. Add scripts to `package.json`:\n```json\n{\n  \"scripts\": {\n    \"lint\": \"next lint\",\n    \"lint:fix\": \"next lint --fix\",\n    \"format\": \"prettier --write .\",\n    \"type-check\": \"tsc --noEmit\"\n  }\n}\n```",
        "testStrategy": "1. Run ESLint to verify configuration: `npm run lint`\n2. Test Prettier formatting: `npm run format`\n3. Verify TypeScript type checking: `npm run type-check`\n4. Test Husky pre-commit hooks by making a commit with linting errors\n5. Ensure lint-staged correctly processes staged files before commit",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Set Up Tailwind CSS and shadcn/ui Component Library",
        "description": "Configure Tailwind CSS with proper theming and integrate the shadcn/ui component library for consistent UI components.",
        "details": "1. Ensure Tailwind CSS is properly configured (should be done during Next.js setup):\n```bash\nnpm install -D tailwindcss postcss autoprefixer tailwindcss-animate\n```\n\n2. Configure Tailwind CSS in `tailwind.config.js`:\n```javascript\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};\n```\n\n3. Create CSS variables in `app/globals.css`:\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 48%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n4. Set up shadcn/ui components:\n```bash\nnpx shadcn-ui@latest init\n```\n\n5. Create a utils.ts file in the lib directory for the cn utility:\n```typescript\n// lib/utils.ts\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n```\n\n6. Install and set up theme provider:\n```bash\nnpm install next-themes\nnpx shadcn-ui@latest add button\n```\n\n7. Create a theme provider component:\n```typescript\n// components/theme-provider.tsx\n\"use client\";\n\nimport * as React from \"react\";\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\nimport { type ThemeProviderProps } from \"next-themes/dist/types\";\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n```\n\n8. Add theme provider to root layout:\n```typescript\n// app/layout.tsx\nimport { ThemeProvider } from \"@/components/theme-provider\";\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n```",
        "testStrategy": "1. Verify Tailwind CSS is working by applying utility classes to elements\n2. Test dark mode functionality with the theme provider\n3. Install and test several shadcn/ui components to ensure they render correctly\n4. Verify responsive design works across different viewport sizes\n5. Test that the theme persists across page refreshes\n6. Validate that custom CSS variables are applied correctly to components",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Prisma ORM Integration",
        "description": "Set up Prisma ORM with the initial database schema, migrations, and client configuration for type-safe database operations.",
        "details": "1. Install Prisma:\n```bash\nnpm install @prisma/client\nnpm install -D prisma\n```\n\n2. Initialize Prisma:\n```bash\nnpx prisma init\n```\n\n3. Configure the database connection in `.env`:\n```\nDATABASE_URL=\"postgresql://username:password@localhost:5432/mydb?schema=public\"\n# Or for MongoDB:\n# DATABASE_URL=\"mongodb+srv://username:password@cluster.mongodb.net/mydb?retryWrites=true&w=majority\"\n```\n\n4. Create the initial schema in `prisma/schema.prisma`:\n```prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\" // or \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  name      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n```\n\n5. Create a Prisma client instance in `lib/prisma.ts`:\n```typescript\nimport { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n```\n\n6. Create initial migration:\n```bash\nnpx prisma migrate dev --name init\n```\n\n7. Create a database seed script in `prisma/seed.ts`:\n```typescript\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Create a test user\n  await prisma.user.upsert({\n    where: { email: 'test@example.com' },\n    update: {},\n    create: {\n      email: 'test@example.com',\n      name: 'Test User',\n    },\n  });\n\n  console.log('Database has been seeded.');\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n```\n\n8. Add seed script to `package.json`:\n```json\n{\n  \"prisma\": {\n    \"seed\": \"ts-node --compiler-options {\\\"module\\\":\\\"CommonJS\\\"} prisma/seed.ts\"\n  }\n}\n```\n\n9. Install ts-node for seeding:\n```bash\nnpm install -D ts-node\n```",
        "testStrategy": "1. Verify Prisma schema compiles without errors: `npx prisma validate`\n2. Test database connection: `npx prisma db pull`\n3. Run migrations to ensure they apply correctly: `npx prisma migrate dev`\n4. Test seeding functionality: `npx prisma db seed`\n5. Create a simple script to query the database and verify type safety\n6. Verify that Prisma Client is properly instantiated in the application\n7. Test database operations in a development environment",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Core Layout and UI Components",
        "description": "Implement the core layout structure and essential UI components following the App Router architecture.",
        "details": "1. Create the root layout in `app/layout.tsx`:\n```typescript\nimport { ReactNode } from \"react\";\nimport { Inter } from \"next/font/google\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/styles/globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"Next.js TypeScript Template\",\n  description: \"A modern full-stack web application template\",\n};\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn(\n        \"min-h-screen bg-background font-sans antialiased\",\n        inter.className\n      )}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n2. Create a header component in `components/layout/header.tsx`:\n```typescript\nimport Link from \"next/link\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\n\nexport function Header() {\n  return (\n    <header className=\"sticky top-0 z-40 w-full border-b bg-background\">\n      <div className=\"container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0\">\n        <div className=\"flex gap-6 md:gap-10\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <span className=\"inline-block font-bold\">Next.js Template</span>\n          </Link>\n          <nav className=\"flex gap-6\">\n            <Link\n              href=\"/\"\n              className=\"flex items-center text-sm font-medium text-muted-foreground\"\n            >\n              Home\n            </Link>\n            <Link\n              href=\"/examples\"\n              className=\"flex items-center text-sm font-medium text-muted-foreground\"\n            >\n              Examples\n            </Link>\n          </nav>\n        </div>\n        <div className=\"flex flex-1 items-center justify-end space-x-4\">\n          <ThemeToggle />\n        </div>\n      </div>\n    </header>\n  );\n}\n```\n\n3. Create a theme toggle component in `components/theme-toggle.tsx`:\n```typescript\n\"use client\";\n\nimport * as React from \"react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Icons } from \"@/components/icons\";\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n    >\n      <Icons.sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Icons.moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n```\n\n4. Create an icons component in `components/icons.tsx`:\n```typescript\nimport {\n  Moon,\n  Sun,\n  type LucideIcon,\n} from \"lucide-react\";\n\nexport type Icon = LucideIcon;\n\nexport const Icons = {\n  sun: Sun,\n  moon: Moon,\n};\n```\n\n5. Create a footer component in `components/layout/footer.tsx`:\n```typescript\nexport function Footer() {\n  return (\n    <footer className=\"border-t py-6 md:py-0\">\n      <div className=\"container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row\">\n        <p className=\"text-center text-sm leading-loose text-muted-foreground md:text-left\">\n          &copy; {new Date().getFullYear()} Next.js TypeScript Template. All rights reserved.\n        </p>\n      </div>\n    </footer>\n  );\n}\n```\n\n6. Create a main layout wrapper in `components/layout/main-layout.tsx`:\n```typescript\nimport { ReactNode } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\n\nexport function MainLayout({ children }: { children: ReactNode }) {\n  return (\n    <div className=\"relative flex min-h-screen flex-col\">\n      <Header />\n      <main className=\"flex-1\">{children}</main>\n      <Footer />\n    </div>\n  );\n}\n```\n\n7. Update the home page in `app/page.tsx`:\n```typescript\nimport { MainLayout } from \"@/components/layout/main-layout\";\n\nexport default function HomePage() {\n  return (\n    <MainLayout>\n      <section className=\"container grid items-center gap-6 pb-8 pt-6 md:py-10\">\n        <div className=\"flex max-w-[980px] flex-col items-start gap-2\">\n          <h1 className=\"text-3xl font-extrabold leading-tight tracking-tighter md:text-4xl\">\n            Next.js TypeScript Template\n          </h1>\n          <p className=\"max-w-[700px] text-lg text-muted-foreground\">\n            A modern, full-stack web application template with Next.js, TypeScript, and Prisma.\n          </p>\n        </div>\n      </section>\n    </MainLayout>\n  );\n}\n```",
        "testStrategy": "1. Verify all components render correctly without errors\n2. Test responsive design across different viewport sizes\n3. Ensure theme toggle functionality works correctly\n4. Validate navigation links work properly\n5. Test layout components with different content sizes\n6. Verify proper nesting of layout components\n7. Check accessibility of all UI components using tools like Lighthouse",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Next.js API Routes with Prisma Integration",
        "description": "Create type-safe API routes using the App Router's route handlers with Prisma integration for database operations.",
        "details": "1. Create a users API route in `app/api/users/route.ts`:\n```typescript\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const page = parseInt(searchParams.get('page') || '1');\n  const pageSize = parseInt(searchParams.get('pageSize') || '10');\n  \n  try {\n    const users = await prisma.user.findMany({\n      skip: (page - 1) * pageSize,\n      take: pageSize,\n      orderBy: { createdAt: 'desc' },\n    });\n    \n    const total = await prisma.user.count();\n    \n    return NextResponse.json({\n      data: users,\n      meta: {\n        total,\n        page,\n        pageSize,\n        totalPages: Math.ceil(total / pageSize),\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch users' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    const user = await prisma.user.create({\n      data: body,\n    });\n    \n    return NextResponse.json(user, { status: 201 });\n  } catch (error) {\n    console.error('Error creating user:', error);\n    return NextResponse.json(\n      { error: 'Failed to create user' },\n      { status: 500 }\n    );\n  }\n}\n```\n\n2. Create a single user API route in `app/api/users/[id]/route.ts`:\n```typescript\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: params.id },\n    });\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch user' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json();\n    \n    const user = await prisma.user.update({\n      where: { id: params.id },\n      data: body,\n    });\n    \n    return NextResponse.json(user);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    return NextResponse.json(\n      { error: 'Failed to update user' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    await prisma.user.delete({\n      where: { id: params.id },\n    });\n    \n    return new NextResponse(null, { status: 204 });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete user' },\n      { status: 500 }\n    );\n  }\n}\n```\n\n3. Create a middleware for API routes in `middleware.ts`:\n```typescript\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  // Add CORS headers for API routes\n  if (request.nextUrl.pathname.startsWith('/api')) {\n    const response = NextResponse.next();\n    response.headers.set('Access-Control-Allow-Origin', '*');\n    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    return response;\n  }\n  \n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/api/:path*'],\n};\n```\n\n4. Create API response types in `lib/types.ts`:\n```typescript\nexport interface ApiResponse<T> {\n  data: T;\n  meta?: {\n    total?: number;\n    page?: number;\n    pageSize?: number;\n    totalPages?: number;\n  };\n}\n\nexport interface ApiError {\n  error: string;\n}\n```\n\n5. Create a utility for API requests in `lib/api-utils.ts`:\n```typescript\nimport { ApiError, ApiResponse } from './types';\n\nexport async function fetchApi<T>(\n  url: string,\n  options?: RequestInit\n): Promise<ApiResponse<T>> {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error((data as ApiError).error || 'An error occurred');\n  }\n\n  return data as ApiResponse<T>;\n}\n```",
        "testStrategy": "1. Test each API endpoint with valid requests to ensure proper responses\n2. Test error handling with invalid requests\n3. Verify pagination works correctly in list endpoints\n4. Test CRUD operations against a test database\n5. Verify middleware correctly applies CORS headers\n6. Test API utility functions with mock responses\n7. Validate type safety of API responses\n8. Test performance with larger datasets",
        "priority": "high",
        "dependencies": [
          1,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Authentication with NextAuth.js",
        "description": "Set up authentication using NextAuth.js with Prisma adapter, including login/signup flows and protected routes.",
        "details": "1. Install NextAuth.js and related packages:\n```bash\nnpm install next-auth @auth/prisma-adapter bcrypt\nnpm install -D @types/bcrypt\n```\n\n2. Update the Prisma schema to support NextAuth in `prisma/schema.prisma`:\n```prisma\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  password      String?\n  accounts      Account[]\n  sessions      Session[]\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n```\n\n3. Run a migration to update the database schema:\n```bash\nnpx prisma migrate dev --name auth\n```\n\n4. Create NextAuth API route in `app/api/auth/[...nextauth]/route.ts`:\n```typescript\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\nimport { compare } from \"bcrypt\";\n\nconst handler = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email }\n        });\n\n        if (!user || !user.password) {\n          return null;\n        }\n\n        const isPasswordValid = await compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name\n        };\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\"\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n    error: \"/auth/error\",\n  },\n  callbacks: {\n    async session({ session, token }) {\n      if (session.user && token.sub) {\n        session.user.id = token.sub;\n      }\n      return session;\n    },\n  },\n});\n\nexport { handler as GET, handler as POST };\n```\n\n5. Create auth-related types in `lib/auth-types.ts`:\n```typescript\nimport { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n```\n\n6. Create a sign-in page in `app/auth/signin/page.tsx`:\n```typescript\n\"use client\";\n\nimport { useState } from \"react\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\n\nexport default function SignInPage() {\n  const router = useRouter();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email,\n        password,\n      });\n\n      if (result?.error) {\n        setError(\"Invalid email or password\");\n      } else {\n        router.push(\"/\");\n        router.refresh();\n      }\n    } catch (error) {\n      setError(\"An error occurred. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"container flex h-screen flex-col items-center justify-center\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <div className=\"flex flex-col space-y-2 text-center\">\n            <h1 className=\"text-2xl font-semibold tracking-tight\">Sign In</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Enter your credentials to sign in to your account\n            </p>\n          </div>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <div className=\"rounded-md bg-destructive/15 p-3 text-sm text-destructive\">\n                {error}\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n```\n\n7. Create an auth provider in `components/auth-provider.tsx`:\n```typescript\n\"use client\";\n\nimport { SessionProvider } from \"next-auth/react\";\nimport { ReactNode } from \"react\";\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  return <SessionProvider>{children}</SessionProvider>;\n}\n```\n\n8. Add the auth provider to the root layout:\n```typescript\n// app/layout.tsx\nimport { AuthProvider } from \"@/components/auth-provider\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn(\n        \"min-h-screen bg-background font-sans antialiased\",\n        inter.className\n      )}>\n        <AuthProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            {children}\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n```",
        "testStrategy": "1. Test user registration and login flows\n2. Verify session persistence across page refreshes\n3. Test protected routes with authenticated and unauthenticated users\n4. Verify error handling for invalid credentials\n5. Test password hashing and comparison\n6. Verify JWT token generation and validation\n7. Test sign-out functionality\n8. Validate that user data is properly stored in the database",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Optional Express Backend Integration",
        "description": "Create a separate Express backend with Prisma integration that can be used as an alternative to Next.js API routes.",
        "details": "1. Create a backend directory and initialize a new Node.js project:\n```bash\nmkdir -p backend/src\ncd backend\nnpm init -y\n```\n\n2. Install dependencies for the Express backend:\n```bash\nnpm install express cors dotenv helmet express-rate-limit @prisma/client\nnpm install -D typescript @types/node @types/express @types/cors ts-node-dev prisma\n```\n\n3. Create a TypeScript configuration in `backend/tsconfig.json`:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es2019\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n4. Create a Prisma configuration in `backend/prisma/schema.prisma` (copy from the main project):\n```prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\" // or \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Copy the models from the main project\n```\n\n5. Create a Prisma client instance in `backend/src/lib/prisma.ts`:\n```typescript\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n});\n\nexport default prisma;\n```\n\n6. Create an Express server in `backend/src/index.ts`:\n```typescript\nimport express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport dotenv from 'dotenv';\nimport rateLimit from 'express-rate-limit';\n\n// Import routes\nimport userRoutes from './routes/users';\n\n// Load environment variables\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n});\napp.use('/api', limiter);\n\n// Routes\napp.use('/api/users', userRoutes);\n\n// Error handling middleware\napp.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// Start server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n```\n\n7. Create user routes in `backend/src/routes/users.ts`:\n```typescript\nimport express from 'express';\nimport prisma from '../lib/prisma';\n\nconst router = express.Router();\n\n// Get all users\nrouter.get('/', async (req, res) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const pageSize = parseInt(req.query.pageSize as string) || 10;\n    \n    const users = await prisma.user.findMany({\n      skip: (page - 1) * pageSize,\n      take: pageSize,\n      orderBy: { createdAt: 'desc' },\n    });\n    \n    const total = await prisma.user.count();\n    \n    res.json({\n      data: users,\n      meta: {\n        total,\n        page,\n        pageSize,\n        totalPages: Math.ceil(total / pageSize),\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ error: 'Failed to fetch users' });\n  }\n});\n\n// Get user by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: req.params.id },\n    });\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    res.status(500).json({ error: 'Failed to fetch user' });\n  }\n});\n\n// Create user\nrouter.post('/', async (req, res) => {\n  try {\n    const user = await prisma.user.create({\n      data: req.body,\n    });\n    \n    res.status(201).json(user);\n  } catch (error) {\n    console.error('Error creating user:', error);\n    res.status(500).json({ error: 'Failed to create user' });\n  }\n});\n\n// Update user\nrouter.put('/:id', async (req, res) => {\n  try {\n    const user = await prisma.user.update({\n      where: { id: req.params.id },\n      data: req.body,\n    });\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(500).json({ error: 'Failed to update user' });\n  }\n});\n\n// Delete user\nrouter.delete('/:id', async (req, res) => {\n  try {\n    await prisma.user.delete({\n      where: { id: req.params.id },\n    });\n    \n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    res.status(500).json({ error: 'Failed to delete user' });\n  }\n});\n\nexport default router;\n```\n\n8. Create a `.env` file in the backend directory:\n```\nPORT=5000\nDATABASE_URL=\"postgresql://username:password@localhost:5432/mydb?schema=public\"\n```\n\n9. Add scripts to `backend/package.json`:\n```json\n{\n  \"scripts\": {\n    \"dev\": \"ts-node-dev --respawn --transpile-only src/index.ts\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/index.js\"\n  }\n}\n```\n\n10. Create a client utility for the Express backend in the main project at `lib/api-client.ts`:\n```typescript\nimport { ApiError, ApiResponse } from './types';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\n\nexport async function fetchFromApi<T>(\n  endpoint: string,\n  options?: RequestInit\n): Promise<ApiResponse<T>> {\n  const response = await fetch(`${API_URL}${endpoint}`, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error((data as ApiError).error || 'An error occurred');\n  }\n\n  return data as ApiResponse<T>;\n}\n```",
        "testStrategy": "1. Test Express server startup and connection\n2. Verify API endpoints match the Next.js API routes\n3. Test CRUD operations against a test database\n4. Verify error handling and rate limiting\n5. Test integration between Next.js frontend and Express backend\n6. Validate shared types between both systems\n7. Test performance and scalability\n8. Verify environment configuration works correctly",
        "priority": "low",
        "dependencies": [
          4,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Client-Side Data Fetching with React Query",
        "description": "Set up React Query for client-side data fetching, caching, and state management with TypeScript integration.",
        "details": "1. Install React Query:\n```bash\nnpm install @tanstack/react-query @tanstack/react-query-devtools\n```\n\n2. Create a React Query provider in `components/providers.tsx`:\n```typescript\n\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { useState, ReactNode } from \"react\";\n\nexport function Providers({ children }: { children: ReactNode }) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime: 60 * 1000, // 1 minute\n            refetchOnWindowFocus: false,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n```\n\n3. Add the React Query provider to the root layout:\n```typescript\n// app/layout.tsx\nimport { Providers } from \"@/components/providers\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn(\n        \"min-h-screen bg-background font-sans antialiased\",\n        inter.className\n      )}>\n        <AuthProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <Providers>\n              {children}\n            </Providers>\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n4. Create API hooks for users in `lib/hooks/use-users.ts`:\n```typescript\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { fetchApi } from \"@/lib/api-utils\";\nimport type { User } from \"@prisma/client\";\nimport type { ApiResponse } from \"@/lib/types\";\n\n// Get all users\nexport function useUsers(page = 1, pageSize = 10) {\n  return useQuery<ApiResponse<User[]>>({\n    queryKey: [\"users\", { page, pageSize }],\n    queryFn: () => fetchApi<User[]>(`/api/users?page=${page}&pageSize=${pageSize}`),\n  });\n}\n\n// Get user by ID\nexport function useUser(id: string) {\n  return useQuery<User>({\n    queryKey: [\"users\", id],\n    queryFn: () => fetchApi<User>(`/api/users/${id}`).then(res => res.data),\n    enabled: !!id,\n  });\n}\n\n// Create user\nexport function useCreateUser() {\n  const queryClient = useQueryClient();\n  \n  return useMutation<User, Error, Omit<User, \"id\" | \"createdAt\" | \"updatedAt\">>(\n    (newUser) => fetchApi<User>(\"/api/users\", {\n      method: \"POST\",\n      body: JSON.stringify(newUser),\n    }).then(res => res.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      },\n    }\n  );\n}\n\n// Update user\nexport function useUpdateUser() {\n  const queryClient = useQueryClient();\n  \n  return useMutation<User, Error, { id: string; data: Partial<User> }>(\n    ({ id, data }) => fetchApi<User>(`/api/users/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(data),\n    }).then(res => res.data),\n    {\n      onSuccess: (data) => {\n        queryClient.invalidateQueries({ queryKey: [\"users\", data.id] });\n        queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      },\n    }\n  );\n}\n\n// Delete user\nexport function useDeleteUser() {\n  const queryClient = useQueryClient();\n  \n  return useMutation<void, Error, string>(\n    (id) => fetchApi<void>(`/api/users/${id}`, {\n      method: \"DELETE\",\n    }).then(() => undefined),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"users\"] });\n      },\n    }\n  );\n}\n```\n\n5. Create an example users page in `app/examples/users/page.tsx`:\n```typescript\n\"use client\";\n\nimport { useState } from \"react\";\nimport { useUsers, useCreateUser, useDeleteUser } from \"@/lib/hooks/use-users\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\n\nexport default function UsersPage() {\n  const [page, setPage] = useState(1);\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  \n  const { data, isLoading, error } = useUsers(page);\n  const createUser = useCreateUser();\n  const deleteUser = useDeleteUser();\n  \n  const handleCreateUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n    \n    try {\n      await createUser.mutateAsync({ email, name });\n      setEmail(\"\");\n      setName(\"\");\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n    }\n  };\n  \n  const handleDeleteUser = async (id: string) => {\n    try {\n      await deleteUser.mutateAsync(id);\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n    }\n  };\n  \n  return (\n    <MainLayout>\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">Users Example</h1>\n        \n        <div className=\"grid gap-8 md:grid-cols-2\">\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">Create User</h2>\n            <form onSubmit={handleCreateUser} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n              </div>\n              <Button type=\"submit\" disabled={createUser.isPending}>\n                {createUser.isPending ? \"Creating...\" : \"Create User\"}\n              </Button>\n            </form>\n          </div>\n          \n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">User List</h2>\n            {isLoading ? (\n              <p>Loading...</p>\n            ) : error ? (\n              <p className=\"text-destructive\">Error loading users</p>\n            ) : (\n              <div className=\"space-y-4\">\n                <ul className=\"space-y-2\">\n                  {data?.data.map((user) => (\n                    <li key={user.id} className=\"flex items-center justify-between p-3 border rounded\">\n                      <div>\n                        <p className=\"font-medium\">{user.name || \"No name\"}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteUser(user.id)}\n                        disabled={deleteUser.isPending}\n                      >\n                        Delete\n                      </Button>\n                    </li>\n                  ))}\n                </ul>\n                \n                {data?.data.length === 0 && (\n                  <p className=\"text-center text-muted-foreground\">No users found</p>\n                )}\n                \n                {data?.meta?.totalPages && data.meta.totalPages > 1 && (\n                  <div className=\"flex justify-center space-x-2 mt-4\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage((p) => Math.max(p - 1, 1))}\n                      disabled={page === 1}\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"py-2 px-3 text-sm\">\n                      Page {page} of {data.meta.totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage((p) => p + 1)}\n                      disabled={page >= data.meta.totalPages}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n```",
        "testStrategy": "1. Test React Query hooks with mock API responses\n2. Verify data fetching, caching, and invalidation\n3. Test optimistic updates and error handling\n4. Verify pagination works correctly\n5. Test form submission and data mutations\n6. Validate that the React Query DevTools are working\n7. Test performance with larger datasets\n8. Verify TypeScript integration and type safety",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Create Documentation and Example Pages",
        "description": "Develop comprehensive documentation and example pages showcasing different rendering strategies, API usage, and component patterns.",
        "details": "1. Create a README.md file in the project root:\n```markdown\n# Next.js TypeScript Template\n\nA modern, full-stack web application template built with Next.js 14+, TypeScript, Prisma ORM, and Tailwind CSS.\n\n## Features\n\n- **Next.js 14+ App Router**: File-based routing with support for SSR, SSG, and server components\n- **TypeScript**: Full type safety across frontend and backend\n- **Prisma ORM**: Type-safe database operations with PostgreSQL (or other databases)\n- **Tailwind CSS & shadcn/ui**: Utility-first CSS and component library\n- **Authentication**: Built-in authentication with NextAuth.js\n- **API Routes**: RESTful API endpoints with Next.js API routes\n- **Optional Express Backend**: Support for a separate Node.js/Express backend\n- **React Query**: Client-side data fetching and state management\n- **Code Quality**: ESLint, Prettier, Husky, and lint-staged\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18.x or higher\n- npm or yarn\n- PostgreSQL, MongoDB, or other database\n\n### Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/yourusername/nextjs-typescript-template.git\ncd nextjs-typescript-template\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Set up environment variables:\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\nDATABASE_URL=\"postgresql://username:password@localhost:5432/mydb?schema=public\"\nNEXTAUTH_SECRET=\"your-nextauth-secret\"\n```\n\n4. Initialize the database:\n\n```bash\nnpx prisma migrate dev --name init\n```\n\n5. Start the development server:\n\n```bash\nnpm run dev\n```\n\n## Project Structure\n\n```\n├── app/                  # Next.js App Router\n│   ├── api/              # API routes\n│   ├── auth/             # Authentication pages\n│   ├── examples/         # Example pages\n│   ├── layout.tsx        # Root layout\n│   └── page.tsx          # Home page\n├── components/           # React components\n│   ├── ui/               # UI components (shadcn/ui)\n│   ├── layout/           # Layout components\n│   └── forms/            # Form components\n├── lib/                  # Shared utilities\n│   ├── hooks/            # Custom React hooks\n│   ├── prisma.ts         # Prisma client\n│   └── utils.ts          # Helper functions\n├── prisma/               # Prisma schema and migrations\n├── public/               # Static assets\n└── backend/              # Optional Express backend\n```\n\n## Documentation\n\n### Rendering Strategies\n\nThis template supports multiple rendering strategies:\n\n- **Server-Side Rendering (SSR)**: Dynamic data fetching on each request\n- **Static Site Generation (SSG)**: Pre-rendered at build time\n- **Incremental Static Regeneration (ISR)**: Static generation with revalidation\n- **Client-Side Rendering**: Data fetching in the browser\n\nExample usage can be found in the `/app/examples` directory.\n\n### Database Operations\n\nPrisma ORM is used for database operations. The schema is defined in `prisma/schema.prisma`.\n\nExample usage:\n\n```typescript\nimport { prisma } from '@/lib/prisma';\n\n// Get all users\nconst users = await prisma.user.findMany();\n\n// Create a user\nconst user = await prisma.user.create({\n  data: {\n    email: 'user@example.com',\n    name: 'John Doe',\n  },\n});\n```\n\n### API Routes\n\nAPI routes are defined in the `/app/api` directory using Next.js App Router route handlers.\n\nExample usage:\n\n```typescript\n// app/api/users/route.ts\nimport { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  const users = await prisma.user.findMany();\n  return NextResponse.json(users);\n}\n```\n\n### Authentication\n\nAuthentication is implemented using NextAuth.js. Configuration is in `/app/api/auth/[...nextauth]/route.ts`.\n\nExample usage:\n\n```typescript\n// Client component\nimport { useSession, signIn, signOut } from 'next-auth/react';\n\nexport default function AuthButton() {\n  const { data: session } = useSession();\n  \n  if (session) {\n    return (\n      <button onClick={() => signOut()}>Sign out</button>\n    );\n  }\n  return (\n    <button onClick={() => signIn()}>Sign in</button>\n  );\n}\n```\n\n## Hybrid Backend Approach\n\nThis template supports two backend approaches:\n\n1. **Next.js API Routes**: Built-in API routes for simpler applications\n2. **Express Backend**: Separate Express server for more complex backends\n\nTo use the Express backend:\n\n1. Navigate to the backend directory:\n\n```bash\ncd backend\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Start the development server:\n\n```bash\nnpm run dev\n```\n\n## Deployment\n\n### Next.js Frontend\n\nThe Next.js application can be deployed to Vercel:\n\n```bash\nnpx vercel\n```\n\n### Express Backend\n\nThe Express backend can be deployed to services like Render or Railway.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n```\n\n2. Create an examples directory with different rendering strategies:\n\n- Create a Server-Side Rendering example in `app/examples/ssr/page.tsx`:\n```typescript\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport const dynamic = 'force-dynamic';\n\nexport default async function SSRPage() {\n  // This data is fetched on each request (SSR)\n  const users = await prisma.user.findMany({\n    take: 5,\n    orderBy: { createdAt: 'desc' },\n  });\n  \n  return (\n    <MainLayout>\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">Server-Side Rendering Example</h1>\n        <p className=\"mb-4 text-muted-foreground\">\n          This page uses Server-Side Rendering (SSR) to fetch data on each request.\n          Refresh the page to see that the timestamp updates.\n        </p>\n        \n        <div className=\"p-4 border rounded-md mb-6\">\n          <p className=\"font-mono text-sm\">Rendered at: {new Date().toISOString()}</p>\n        </div>\n        \n        <h2 className=\"text-xl font-semibold mb-4\">Recent Users</h2>\n        <ul className=\"space-y-2\">\n          {users.map((user) => (\n            <li key={user.id} className=\"p-3 border rounded\">\n              <p className=\"font-medium\">{user.name || \"No name\"}</p>\n              <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </MainLayout>\n  );\n}\n```\n\n- Create a Static Site Generation example in `app/examples/ssg/page.tsx`:\n```typescript\nimport { MainLayout } from \"@/components/layout/main-layout\";\n\nexport const dynamic = 'force-static';\n\nexport default function SSGPage() {\n  // This page is generated at build time (SSG)\n  return (\n    <MainLayout>\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">Static Site Generation Example</h1>\n        <p className=\"mb-4 text-muted-foreground\">\n          This page uses Static Site Generation (SSG) and is generated at build time.\n          The timestamp below will not change on refresh.\n        </p>\n        \n        <div className=\"p-4 border rounded-md\">\n          <p className=\"font-mono text-sm\">Built at: {new Date().toISOString()}</p>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n```\n\n- Create an Incremental Static Regeneration example in `app/examples/isr/page.tsx`:\n```typescript\nimport { MainLayout } from \"@/components/layout/main-layout\";\n\nexport const revalidate = 60; // Revalidate every 60 seconds\n\nexport default function ISRPage() {\n  // This page uses Incremental Static Regeneration (ISR)\n  return (\n    <MainLayout>\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">Incremental Static Regeneration Example</h1>\n        <p className=\"mb-4 text-muted-foreground\">\n          This page uses Incremental Static Regeneration (ISR) with a revalidation period of 60 seconds.\n          The timestamp will update after the revalidation period.\n        </p>\n        \n        <div className=\"p-4 border rounded-md\">\n          <p className=\"font-mono text-sm\">Generated at: {new Date().toISOString()}</p>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n```\n\n3. Create an examples index page in `app/examples/page.tsx`:\n```typescript\nimport Link from \"next/link\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ExamplesPage() {\n  return (\n    <MainLayout>\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-6\">Examples</h1>\n        <p className=\"mb-8 text-muted-foreground\">\n          Explore different features and patterns implemented in this template.\n        </p>\n        \n        <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          <ExampleCard\n            title=\"Server-Side Rendering\"\n            description=\"Example of fetching data on each request using SSR.\"\n            href=\"/examples/ssr\"\n          />\n          <ExampleCard\n            title=\"Static Site Generation\"\n            description=\"Example of pre-rendering pages at build time using SSG.\"\n            href=\"/examples/ssg\"\n          />\n          <ExampleCard\n            title=\"Incremental Static Regeneration\"\n            description=\"Example of static generation with revalidation using ISR.\"\n            href=\"/examples/isr\"\n          />\n          <ExampleCard\n            title=\"Client-Side Data Fetching\"\n            description=\"Example of fetching data in the browser using React Query.\"\n            href=\"/examples/users\"\n          />\n          <ExampleCard\n            title=\"Form Handling\"\n            description=\"Example of form validation and submission.\"\n            href=\"/examples/form\"\n          />\n          <ExampleCard\n            title=\"Authentication\"\n            description=\"Example of protected routes and user authentication.\"\n            href=\"/examples/auth\"\n          />\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n\nfunction ExampleCard({ title, description, href }: { title: string; description: string; href: string }) {\n  return (\n    <div className=\"rounded-lg border bg-card text-card-foreground shadow-sm\">\n      <div className=\"p-6 flex flex-col h-full\">\n        <h3 className=\"text-lg font-semibold\">{title}</h3>\n        <p className=\"mt-2 text-sm text-muted-foreground flex-grow\">{description}</p>\n        <div className=\"mt-4\">\n          <Button asChild>\n            <Link href={href}>View Example</Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n4. Create a form example in `app/examples/form/page.tsx`:\n```typescript\n\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { MainLayout } from \"@/components/layout/main-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Invalid email address\" }),\n  message: z.string().min(10, { message: \"Message must be at least 10 characters\" }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function FormPage() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n  \n  const onSubmit = async (data: FormValues) => {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    console.log(\"Form submitted:\", data);\n    reset();\n    setIsSubmitted(true);\n  };\n  \n  return (\n    <MainLayout>\n      <div className=\"container py-8 max-w-md mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-6\">Form Example</h1>\n        \n        {isSubmitted ? (\n          <div className=\"space-y-4\">\n            <Alert className=\"bg-green-50 border-green-200\">\n              <AlertDescription className=\"text-green-800\">\n                Form submitted successfully!\n              </AlertDescription>\n            </Alert>\n            <Button onClick={() => setIsSubmitted(false)}>Submit Another</Button>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input id=\"name\" {...register(\"name\")} />\n              {errors.name && (\n                <p className=\"text-sm text-destructive\">{errors.name.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" type=\"email\" {...register(\"email\")} />\n              {errors.email && (\n                <p className=\"text-sm text-destructive\">{errors.email.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea id=\"message\" rows={5} {...register(\"message\")} />\n              {errors.message && (\n                <p className=\"text-sm text-destructive\">{errors.message.message}</p>\n              )}\n            </div>\n            \n            <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n              {isSubmitting ? \"Submitting...\" : \"Submit\"}\n            </Button>\n          </form>\n        )}\n      </div>\n    </MainLayout>\n  );\n}\n```",
        "testStrategy": "1. Verify all example pages render correctly without errors\n2. Test documentation accuracy by following the setup instructions\n3. Validate that all rendering strategies work as described\n4. Test form validation and submission in the form example\n5. Verify that the README contains all necessary information\n6. Test navigation between example pages\n7. Validate code snippets in the documentation\n8. Ensure all examples are accessible and responsive",
        "priority": "low",
        "dependencies": [
          5,
          6,
          7,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-28T02:08:50.599Z",
      "updated": "2025-07-28T02:08:50.599Z",
      "description": "Tasks for master context"
    }
  }
}